#!/bin/bash

# Script de Checklist Pre-HTTPS para AWS
# Uso: ./scripts/pre-https-checklist.sh [dominio.com]

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

DOMAIN=$1

echo -e "${BLUE}üîç CHECKLIST PRE-HTTPS - MVP Proxy Scraper${NC}"
echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"

if [[ -n "$DOMAIN" ]]; then
    echo -e "${YELLOW}Dominio proporcionado: ${DOMAIN}${NC}"
else
    echo -e "${YELLOW}‚ÑπÔ∏è  No se proporcion√≥ dominio - checks generales √∫nicamente${NC}"
fi

echo ""

# 1. Verificar conectividad AWS
echo -e "${BLUE}1. üåê Verificando conectividad AWS...${NC}"
if curl -s --connect-timeout 5 http://3.254.74.19:3080 > /dev/null; then
    echo -e "   ‚úÖ Frontend AWS (puerto 3080) - ACCESIBLE"
else
    echo -e "   ‚ùå Frontend AWS (puerto 3080) - NO ACCESIBLE"
fi

if curl -s --connect-timeout 5 http://3.254.74.19:3081/health > /dev/null; then
    echo -e "   ‚úÖ Backend AWS (puerto 3081) - FUNCIONANDO"
else
    echo -e "   ‚ùå Backend AWS (puerto 3081) - NO RESPONDE"
fi

# 2. Verificar servicios Docker
echo ""
echo -e "${BLUE}2. üê≥ Verificando servicios Docker en AWS...${NC}"
echo -e "   üí° Ejecutar en servidor AWS: docker compose -f docker-compose.aws.yml ps"

# 3. Verificar DNS si se proporcion√≥ dominio
if [[ -n "$DOMAIN" ]]; then
    echo ""
    echo -e "${BLUE}3. üåê Verificando configuraci√≥n DNS...${NC}"
    
    # Verificar resoluci√≥n DNS
    DNS_IP=$(nslookup $DOMAIN 8.8.8.8 2>/dev/null | grep -A1 "Name:" | grep "Address:" | tail -1 | awk '{print $2}' || echo "NO_RESUELVE")
    
    if [[ "$DNS_IP" == "3.254.74.19" ]]; then
        echo -e "   ‚úÖ DNS correcto: ${DOMAIN} ‚Üí 3.254.74.19"
    elif [[ "$DNS_IP" == "NO_RESUELVE" ]]; then
        echo -e "   ‚ùå DNS no resuelve: ${DOMAIN}"
        echo -e "   üí° Configurar registro A: ${DOMAIN} ‚Üí 3.254.74.19"
    else
        echo -e "   ‚ö†Ô∏è  DNS incorrecto: ${DOMAIN} ‚Üí ${DNS_IP}"
        echo -e "   üí° Debe apuntar a: 3.254.74.19"
    fi
    
    # Verificar propagaci√≥n desde m√∫ltiples DNS
    echo -e "   üîç Verificando propagaci√≥n DNS..."
    
    for dns_server in "1.1.1.1" "8.8.8.8"; do
        result=$(nslookup $DOMAIN $dns_server 2>/dev/null | grep -A1 "Name:" | grep "Address:" | tail -1 | awk '{print $2}' || echo "NO_RESUELVE")
        if [[ "$result" == "3.254.74.19" ]]; then
            echo -e "   ‚úÖ DNS Server ${dns_server}: Correcto"
        else
            echo -e "   ‚ö†Ô∏è  DNS Server ${dns_server}: ${result}"
        fi
    done
else
    echo ""
    echo -e "${BLUE}3. üåê Configuraci√≥n DNS${NC}"
    echo -e "   ‚ö†Ô∏è  Dominio no proporcionado"
    echo -e "   üí° Para configurar HTTPS necesitas:"
    echo -e "      ‚Ä¢ Un dominio (ej: mi-app.com)"
    echo -e "      ‚Ä¢ Registro A: dominio ‚Üí 3.254.74.19"
    echo -e "      ‚Ä¢ TTL: 300 segundos"
fi

# 4. Verificar puertos en Security Groups
echo ""
echo -e "${BLUE}4. üõ°Ô∏è  Verificando Security Groups AWS...${NC}"
echo -e "   üìã Puertos necesarios para HTTPS:"
echo -e "      ‚Ä¢ Puerto 22 (SSH) - Para administraci√≥n"
echo -e "      ‚Ä¢ Puerto 80 (HTTP) - Para redirect a HTTPS"
echo -e "      ‚Ä¢ Puerto 443 (HTTPS) - Para tr√°fico SSL"
echo -e "   üí° Ejecutar: ./scripts/aws-security-group-https.sh"

# 5. Verificar AWS CLI
echo ""
echo -e "${BLUE}5. ‚öôÔ∏è  Verificando AWS CLI...${NC}"
if command -v aws > /dev/null 2>&1; then
    if aws sts get-caller-identity > /dev/null 2>&1; then
        echo -e "   ‚úÖ AWS CLI configurado correctamente"
        AWS_ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
        echo -e "   üìã Cuenta AWS: ${AWS_ACCOUNT}"
    else
        echo -e "   ‚ö†Ô∏è  AWS CLI instalado pero no configurado"
        echo -e "   üí° Ejecutar: aws configure"
    fi
else
    echo -e "   ‚ùå AWS CLI no instalado"
    echo -e "   üí° Para Security Groups autom√°ticos, instalar AWS CLI"
fi

# 6. Verificar scripts disponibles
echo ""
echo -e "${BLUE}6. üìú Verificando scripts HTTPS...${NC}"

scripts=("setup-https-aws.sh" "aws-security-group-https.sh" "setup-alb-https.sh")
for script in "${scripts[@]}"; do
    if [[ -f "scripts/$script" ]]; then
        if [[ -x "scripts/$script" ]]; then
            echo -e "   ‚úÖ scripts/${script} - Listo para ejecutar"
        else
            echo -e "   ‚ö†Ô∏è  scripts/${script} - Necesita permisos: chmod +x scripts/${script}"
        fi
    else
        echo -e "   ‚ùå scripts/${script} - No encontrado"
    fi
done

# 7. Verificar espacio en disco (estimaci√≥n)
echo ""
echo -e "${BLUE}7. üíæ Verificando recursos del sistema...${NC}"
echo -e "   üìã Requisitos estimados para HTTPS:"
echo -e "      ‚Ä¢ Nginx: ~2MB"
echo -e "      ‚Ä¢ Certbot: ~10MB"
echo -e "      ‚Ä¢ Certificados: ~10KB"
echo -e "   üí° Total: ~15MB adicionales"

# 8. Backup checklist
echo ""
echo -e "${BLUE}8. üíæ Checklist de Backup...${NC}"
echo -e "   üìã Antes de configurar HTTPS:"
echo -e "      ‚Ä¢ [ ] Backup de docker-compose.aws.yml"
echo -e "      ‚Ä¢ [ ] Backup de configuraci√≥n de red actual"
echo -e "      ‚Ä¢ [ ] Documentar URLs HTTP actuales"
echo -e "      ‚Ä¢ [ ] Verificar que la app funciona en HTTP"

# 9. Resumen de pr√≥ximos pasos
echo ""
echo -e "${GREEN}üéØ PR√ìXIMOS PASOS PARA IMPLEMENTAR HTTPS:${NC}"
echo ""

if [[ -n "$DOMAIN" ]]; then
    echo -e "${YELLOW}OPCI√ìN AUTOM√ÅTICA (Recomendada):${NC}"
    echo -e "   1. Configurar Security Groups:"
    echo -e "      ${GREEN}./scripts/aws-security-group-https.sh${NC}"
    echo -e "   2. Ejecutar configuraci√≥n completa:"
    echo -e "      ${GREEN}ssh -i tu-key.pem ubuntu@3.254.74.19${NC}"
    echo -e "      ${GREEN}cd projects/scraper-proxies${NC}"
    echo -e "      ${GREEN}./scripts/setup-https-aws.sh ${DOMAIN}${NC}"
else
    echo -e "${YELLOW}PARA CONTINUAR NECESITAS:${NC}"
    echo -e "   1. Conseguir un dominio"
    echo -e "   2. Configurar DNS: dominio ‚Üí 3.254.74.19"
    echo -e "   3. Ejecutar: ${GREEN}./scripts/pre-https-checklist.sh tu-dominio.com${NC}"
fi

echo ""
echo -e "${YELLOW}OPCI√ìN MANUAL:${NC}"
echo -e "   ‚Ä¢ Ver documentaci√≥n: ${GREEN}docs/CONFIGURACION-HTTPS-AWS.md${NC}"
echo -e "   ‚Ä¢ Task tracker: ${GREEN}docs/tasks/P3-F6_CONFIGURACION-HTTPS-LETSENCRYPT.md${NC}"

echo ""
echo -e "${BLUE}‚è±Ô∏è  Tiempo estimado total: 30-45 minutos${NC}"
echo -e "${BLUE}üîß Downtime estimado: < 5 minutos${NC}" 